diff --git a/Makefile b/Makefile
index 34a0afc3a..9c51fcfc8 100644
--- a/Makefile
+++ b/Makefile
@@ -1115,7 +1115,7 @@ export MODORDER := $(extmod_prefix)modules.order
 export MODULES_NSDEPS := $(extmod_prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ magic/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 18b5500ea..580dc1892 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -370,6 +370,7 @@
 446	common	landlock_restrict_self	sys_landlock_restrict_self
 447	common	memfd_secret		sys_memfd_secret
 448	common	process_mrelease	sys_process_mrelease
+449	common	magic	            sys_magic
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 1c5fb86d4..d7a982468 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -880,8 +880,11 @@ __SYSCALL(__NR_memfd_secret, sys_memfd_secret)
 #define __NR_process_mrelease 448
 __SYSCALL(__NR_process_mrelease, sys_process_mrelease)
 
+#define __NR_magic 449
+__SYSCALL(__NR_magic, sys_magic)
+
 #undef __NR_syscalls
-#define __NR_syscalls 449
+#define __NR_syscalls 450
 
 /*
  * 32 bit systems traditionally used different
diff --git a/magic/Makefile b/magic/Makefile
new file mode 100644
index 000000000..25a79f20c
--- /dev/null
+++ b/magic/Makefile
@@ -0,0 +1 @@
+obj-y := magic.o
\ No newline at end of file
diff --git a/magic/magic.c b/magic/magic.c
new file mode 100644
index 000000000..8bacec8bc
--- /dev/null
+++ b/magic/magic.c
@@ -0,0 +1,326 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <linux/cred.h>
+#include <linux/sched.h>
+#include <linux/spinlock.h>
+#include <linux/list.h>
+
+#define MAINLIST_SIZE 64
+#define CHILDLIST_SIZE 64
+
+struct MagicUser;
+
+struct MagicUser {
+    // The UID represented by this user
+    kuid_t uid;
+    // A pointer to a list of up to 64 pointers
+    struct MagicUser** children;
+    char username[64];
+    char password[64];
+};
+
+typedef enum {
+    MAGIC_ADD = 0,
+    MAGIC_EDIT = 1,
+    MAGIC_DELETE = 2,
+    MAGIC_SWITCH = 3,
+} MagicMode;
+
+struct MagicUser* magic_users[MAINLIST_SIZE] = {NULL};
+DEFINE_SPINLOCK(magic_lock);
+
+/*
+ * Add User - Traverses |magic_users| to find the current user's MagicUser, then adds a new one to MagicUser->children
+ * Edit User - Traverses |magic_users| to find the current user's MagicUser and the requested one.
+ * If the requested one is a child of the current one, the provided username and password are copied in.
+ * Delete User - Traverses |magic_users| to find the current user's MagicUser and the requested one.
+ * If the requested one is a child of the current one, the user is deleted, and the pointers removed from the userlist and children
+ * Switch User - Traverses |magic_users| to find the current user's MagicUser and the requested one.
+ * If the requested one is a child of the current one, the current process has its UID/GID switched to that of the child.
+ * Otherwise, the provided password will be checked
+*/
+
+long do_add(char* username, char* password);
+long do_edit(char* username, char* password);
+long do_delete(char* username);
+long do_switch(char* username, char* password);
+
+void delete_user(struct MagicUser* user);
+int locate_user_by_name(struct MagicUser** array, int size, char* username);
+int locate_user_by_uid(struct MagicUser** array, int size, int uid);
+int locate_empty(struct MagicUser** array, int size);
+void do_init(void);
+static unsigned short nextId = 0;
+
+static int initialized = 0;
+void print_user(struct MagicUser* user, int newline);
+void print_user_list(struct MagicUser** users, int size);
+
+SYSCALL_DEFINE3(magic, MagicMode, mode, unsigned char __user*, username, unsigned char __user*, password) {
+    char username_buf[64];
+    char password_buf[64];
+    long ret;
+    if (initialized == 0) do_init();
+    spin_lock(&magic_lock);
+    switch (mode) {
+        case MAGIC_ADD:
+            if (copy_from_user(username_buf, username, sizeof(username_buf))) return -EFAULT;
+            if (copy_from_user(password_buf, password, sizeof(password_buf))) return -EFAULT;
+            ret = do_add(username_buf, password_buf);
+            goto out;
+        case MAGIC_EDIT:
+            if (copy_from_user(username_buf, username, sizeof(username_buf))) return -EFAULT;
+            if (copy_from_user(password_buf, password, sizeof(password_buf))) return -EFAULT;
+            ret = do_edit(username_buf, password_buf);
+            goto out;
+        case MAGIC_SWITCH:
+            if (copy_from_user(username_buf, username, sizeof(username_buf))) return -EFAULT;
+            // This can fail, password might not be required
+            if (copy_from_user(password_buf, password, sizeof(password_buf))) {
+                ret = do_switch(username_buf, NULL);
+            } else {
+                ret = do_switch(username_buf, password_buf);
+            }
+            goto out;
+        case MAGIC_DELETE:
+            if (copy_from_user(username_buf, username, sizeof(username_buf))) return -EFAULT;
+            ret = do_delete(username_buf);
+            goto out;
+        default:
+            ret = -EINVAL;
+            goto out;
+    }
+    out:
+    spin_unlock(&magic_lock);
+    return ret;
+}
+/*
+ * Initializes the 'root' MagicUser
+ */
+void do_init() {
+    char username[64] = "root";
+    char password[64] = "password";
+    struct MagicUser* root;
+
+    spin_lock(&magic_lock);
+    root = kzalloc(sizeof(struct MagicUser), GFP_KERNEL);
+    root->uid.val = 0;
+    memcpy(root->username, username, sizeof(username));
+    memcpy(root->password, password, sizeof(password));
+    root->children = kzalloc(sizeof(struct MagicUser*) * CHILDLIST_SIZE, GFP_KERNEL);
+    magic_users[0] = root;
+    nextId = 1;
+    initialized = 1;
+    spin_unlock(&magic_lock);
+}
+
+/*
+ * Returns the position of a user with a given username in the given array, or -1
+ */
+int locate_user_by_name(struct MagicUser** array, int size, char* username){
+    int i;
+    for (i = 0; i < size; i++) {
+        struct MagicUser* user = array[i];
+        if (user == NULL) continue;
+        if (strncmp(user->username, username, 64) == 0) {
+            return i;
+        }
+    }
+    return -1;
+}
+
+/*
+ * Returns the position of a user with a UID in the given array, or -1
+ */
+int locate_user_by_uid(struct MagicUser** array, int size, int uid) {
+    int i;
+    for (i = 0; i < size; i++) {
+        struct MagicUser* user = magic_users[i];
+        if (user == NULL) continue;
+        if (user->uid.val == uid) return i;
+    }
+    return -1;
+}
+
+/*
+ * Returns a pointer to the first empty slot in |array|, or NULL
+ */
+int locate_empty(struct MagicUser** array, int size) {
+    int i;
+    for (i = 0; i < size; i++) {
+        if (array[i] == NULL) return i;
+    }
+    return -1;
+}
+
+/*
+ * Adds a new user as a child of the current user
+ */
+long do_add(char* username, char* password) {
+    int mainlist_slot;
+    int child_slot;
+    struct MagicUser* me;
+    struct MagicUser* newUser;
+    long ret;
+    int index;
+    if (locate_user_by_name(magic_users, MAINLIST_SIZE, username) != -1) {
+        return -EEXIST;
+    }
+    mainlist_slot = locate_empty(magic_users, MAINLIST_SIZE);
+    if (mainlist_slot == -1) {
+        return -ENOMEM;
+    } else {
+    }
+    index = locate_user_by_uid(magic_users, MAINLIST_SIZE, current->cred->uid.val);
+    if (index == -1) {
+        return -ENOENT;
+    }
+    me = magic_users[index];
+    child_slot = locate_empty(me->children, CHILDLIST_SIZE);
+    if (child_slot == -1) {
+        return -ENOMEM;
+    }
+    newUser = kzalloc(sizeof(struct MagicUser), GFP_KERNEL);
+    if (newUser == NULL) {
+        return -ENOMEM;
+    }
+    newUser->uid.val = nextId;
+    memcpy(newUser->username, username, 64);
+    memcpy(newUser->password, password, 64);
+    newUser->children = kzalloc(sizeof(struct MagicUser*) * CHILDLIST_SIZE, GFP_KERNEL);
+    if (newUser->children == NULL) {
+        kfree(newUser);
+        return -ENOMEM;
+    }
+    magic_users[mainlist_slot] = newUser;
+    me->children[child_slot] = newUser;
+    ret = (long)nextId;
+    nextId++;
+    return ret;
+}
+
+/*
+ * Changes the password of a user (either the current one, or a child)
+ */
+long do_edit(char* username, char* password) {
+    int index;
+    int myIndex;
+    struct MagicUser* me;
+    struct MagicUser* child;
+
+    myIndex = locate_user_by_uid(magic_users, MAINLIST_SIZE, current->cred->uid.val);
+    if (myIndex == -1) {
+        return -ENOENT;
+    }
+    me = magic_users[myIndex];
+    if (strncmp(me->username, username, 64) == 0) {
+        child = me;
+    } else {
+        index = locate_user_by_name(me->children, CHILDLIST_SIZE, username);
+        if (index == -1) {
+            return -EPERM;
+        }
+        child = me->children[index];
+    }
+    strncpy(child->password, password, 64);
+    return 0;
+}
+
+/*
+ * Attempts to switch to another user - may only switch to one of your own children
+ */
+long do_switch(char* username, char* password) {
+    int index;
+    int myIndex;
+    struct MagicUser* me;
+    struct MagicUser* child;
+    struct cred* new;
+    struct user_namespace *ns;
+    kuid_t kuid;
+    kgid_t kgid;
+
+    myIndex = locate_user_by_uid(magic_users, MAINLIST_SIZE, current->cred->uid.val);
+    if (myIndex == -1) {
+        return -ENOENT;
+    }
+    me = magic_users[myIndex];
+    if (strncmp(me->username, username, 64) == 0) {
+        // Immediately return - we are the requested user
+        return 0;
+    }
+    // Try and switch to a child
+    index = locate_user_by_name(me->children, CHILDLIST_SIZE, username);
+    if (index == -1) {
+        // Not a child, look for the user in the global list
+        index = locate_user_by_name(magic_users, MAINLIST_SIZE, username);
+        if (index == -1) {
+            // User doesn't exist at all
+            return -ENOENT;
+        } else if (index == 0) {
+            // Prevent logging back in as root
+            return -EPERM;
+        }
+        child = magic_users[index];
+        // Check the passed password is correct - if no password was passed, fail
+        if (password == NULL) return -EFAULT;
+        if (strncmp(password, child->password, 64) != 0) {
+            return -EPERM;
+        }
+    } else {
+        // Switching to a child is allowed without the password
+        child = me->children[index];
+    }
+    new = prepare_creds();
+    if (!new) return -ENOMEM;
+    ns = current_user_ns();
+    kuid = make_kuid(ns, child->uid.val);
+    kgid = make_kgid(ns, child->uid.val);
+    if (!uid_valid(kuid)) return -EINVAL;
+    if (!gid_valid(kgid)) return -EINVAL;
+    new->suid = new->uid = kuid;
+    new->fsuid = new->euid = kuid;
+    new->sgid = new->gid = kgid;
+    new->fsgid = new->egid = kgid;
+    return commit_creds(new);
+}
+
+/*
+ * Delete a child of the current user
+ */
+long do_delete(char* username) {
+    int index;
+    int myIndex;
+    int globalIndex;
+    struct MagicUser* me;
+    struct MagicUser* child;
+
+    myIndex = locate_user_by_uid(magic_users, MAINLIST_SIZE, current->cred->uid.val);
+    if (myIndex == -1) {
+        return -ENOENT;
+    }
+    me = magic_users[myIndex];
+    index = locate_user_by_name(me->children, CHILDLIST_SIZE, username);
+    if (index == -1) {
+        return -EPERM;
+    }
+    globalIndex = locate_user_by_name(magic_users, MAINLIST_SIZE, username);
+    child = me->children[index];
+    delete_user(child);
+    me->children[index] = NULL;
+    magic_users[globalIndex] = NULL;
+    return 0;
+}
+
+void delete_user(struct MagicUser* user) {
+    int i;
+    struct MagicUser* child;
+
+    for (i = 0; i < CHILDLIST_SIZE; i++) {
+        child = user->children[i];
+        if (child == NULL) continue;
+        delete_user(child);
+        user->children[i] = NULL;
+    }
+    kfree(user->children);
+    kfree(user);
+}
